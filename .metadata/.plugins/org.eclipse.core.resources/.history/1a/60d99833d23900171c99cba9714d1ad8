import java.util.Arrays;

@SuppressWarnings("unchecked")
public class Face<E> {
	public ArrayList<ArrayList<E>>;
	private Face<Object> aboveFace;
	private Face<Object> belowFace;
	private Face<Object> leftFace;
	private Face<Object> rightFace;

	public Face() {}

	public Face(Object c) {
		face = new ArrayList();
		};
	}

	public void setAbove(Face<Object> f) {
		aboveFace = f;
	}

	public void setBelow(Face<Object> f) {
		belowFace = f;
	}

	public void setLeft(Face<Object> f) {
		leftFace = f;
	}

	public void setRight(Face<Object> f) {
		rightFace = f;
	}

	// fix casting to (char), modularity
	public void rotateClockWise() {
		Object temp = face[0][0];
		Object temp2 = face[1][0];
		face[0][0] = face[2][0];
		face[1][0] = face[2][1];
		face[2][0] = face[2][2];
		face[2][1] = face[1][2];
		face[2][2] = face[0][2];
		face[1][2] = face[0][1];
		face[0][2] = temp;
		face[0][1] = temp2;

		switch ((char) face[1][1]) {
			case 'w': {
				Object[] tempArr = aboveFace.getSide('b');
				aboveFace.setSide('b', leftFace.getSide('r'), true);
				leftFace.setSide('r', belowFace.getSide('t'), false);
				belowFace.setSide('t', rightFace.getSide('l'), true);
				rightFace.setSide('l', tempArr, false);
				break;
			}
			case 'y': {
				Object[] tempArr = aboveFace.getSide('t');
				aboveFace.setSide('t', leftFace.getSide('r'), false);
				leftFace.setSide('r', belowFace.getSide('b'), true);
				belowFace.setSide('b', rightFace.getSide('l'), false);
				rightFace.setSide('l', tempArr, true);
				break;
			}
			case 'g': {
				Object[] tempArr = aboveFace.getSide('t');
				aboveFace.setSide('t', leftFace.getSide('t'), false);
				leftFace.setSide('t', belowFace.getSide('t'), false);
				belowFace.setSide('t', rightFace.getSide('t'), false);
				rightFace.setSide('t', tempArr, false);
				break;
			}
			case 'b': {
				Object[] tempArr = aboveFace.getSide('b');
				aboveFace.setSide('b', leftFace.getSide('b'), false);
				leftFace.setSide('b', belowFace.getSide('b'), false);
				belowFace.setSide('b', rightFace.getSide('b'), false);
				rightFace.setSide('b', tempArr, false);
				break;
			}
			case 'o': {
				Object[] tempArr = aboveFace.getSide('l');
				aboveFace.setSide('l', leftFace.getSide('r'), true);
				leftFace.setSide('r', belowFace.getSide('l'), true);
				belowFace.setSide('l', rightFace.getSide('l'), false);
				rightFace.setSide('l', tempArr, false);
				break;
			}
			case 'r': {
				Object[] tempArr = aboveFace.getSide('r');
				aboveFace.setSide('r', leftFace.getSide('r'), false);
				leftFace.setSide('r', belowFace.getSide('r'), false);
				belowFace.setSide('r', rightFace.getSide('l'), true);
				rightFace.setSide('l', tempArr, true);
				break;
			}
		}
	}

	public void rotateCounterClockWise() {
		Object temp = face[0][0];
		Object temp2 = face[0][1];
		face[0][0] = face[0][2];
		face[0][1] = face[1][2];
		face[0][2] = face[2][2];
		face[1][2] = face[2][1];
		face[2][2] = face[2][0];
		face[2][1] = face[1][0];
		face[2][0] = temp;
		face[1][0] = temp2;

		switch ((char) face[1][1]) {
			case 'w': {
				Object[] tempArr = aboveFace.getSide('b');
				aboveFace.setSide('b', rightFace.getSide('l'), false);
				rightFace.setSide('l', belowFace.getSide('t'), true);
				belowFace.setSide('t', leftFace.getSide('r'), false);
				leftFace.setSide('r', tempArr, true);
				break;
			}
			case 'y': {
				Object[] tempArr = aboveFace.getSide('t');
				aboveFace.setSide('t', rightFace.getSide('l'), true);
				rightFace.setSide('l', belowFace.getSide('b'), false);
				belowFace.setSide('b', leftFace.getSide('r'), true);
				leftFace.setSide('r', tempArr, false);
				break;
			}
			case 'g': {
				Object[] tempArr = aboveFace.getSide('t');
				aboveFace.setSide('t', rightFace.getSide('t'), false);
				rightFace.setSide('t', belowFace.getSide('t'), false);
				belowFace.setSide('t', leftFace.getSide('t'), false);
				leftFace.setSide('t', tempArr, false);
				break;
			}
			case 'b': {
				Object[] tempArr = aboveFace.getSide('b');
				aboveFace.setSide('b', rightFace.getSide('b'), false);
				rightFace.setSide('b', belowFace.getSide('b'), false);
				belowFace.setSide('b', leftFace.getSide('b'), false);
				leftFace.setSide('b', tempArr, false);
				break;
			}
			case 'o': {
				Object[] tempArr = aboveFace.getSide('l');
				aboveFace.setSide('l', rightFace.getSide('l'), false);
				rightFace.setSide('l', belowFace.getSide('l'), false);
				belowFace.setSide('l', leftFace.getSide('r'), true);
				leftFace.setSide('r', tempArr, true);
				break;
			}
			case 'r': {
				Object[] tempArr = aboveFace.getSide('r');
				aboveFace.setSide('r', rightFace.getSide('l'), true);
				rightFace.setSide('l', belowFace.getSide('r'), true);
				belowFace.setSide('r', leftFace.getSide('r'), false);
				leftFace.setSide('r', tempArr, false);
				break;
			}
		}
	}

	public void print(String prefix) {
		for (Object[] r : (Object[][]) face) {
			System.out.print(prefix);
			for (Object c : r) {
				System.out.print(c + " ");
			}
			if (!r.equals(face[2]))
			{
				System.out.println();
			}
		}
	}

	public void printRow(int rNum) {
		for (Object c : face[rNum])
		{
			System.out.print(c + " ");
		}
	}

	public void setSide(char side, Object[] to, boolean reverse) {
		if (reverse)
		{
			for (int i = 0; i < to.length / 2; i++)
			{
				Object temp = to[i];
				to[i] = to[to.length - 1 - i];
				to[to.length - 1 - i] = temp;
			}
		}
		switch (side) {
			case 't': {
				face[0] = to;
				break;
			}
			case 'b': {
				face[face.length - 1] = to;
				break;
			}
			case 'l': {
				int i = 0;
				for (Object c : to)
				{
					face[i][0] = c;
					i++;
				}
				break;
			}
			case 'r': {
				int i = 0;
				for (Object c : to)
				{
					face[i][face.length - 1] = c;
					i++;
				}
				break;
			}
			default:
				break;
		}
	}

	public Object[] getSide(char s) {
		switch (s) {
			case 't': {
				return Arrays.copyOf(face[0], face[0].length);
			}
			case 'b': {
				return Arrays.copyOf(face[face.length - 1], face[0].length);
			}
			case 'l': {
				Object[] arr = (Object[]) new Object[face.length];
				for (int r = 0; r < face.length; r++)
				{
					arr[r] = face[r][0];
				}
				return arr;

			}
			case 'r': {
				Object[] arr = (Object[]) new Object[3];
				for (int r = 0; r < face.length; r++)
				{
					arr[r] = face[r][face.length - 1];
				}
				return arr;
			}
		}
		return null;
	}
}
