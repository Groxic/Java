import java.util.Arrays;

public class RubiksCube {
	/*
	 *		 G G G
	 * 		 G 0 G
	 * 		 G G G
	 * O O O W W W R R R Y Y Y
	 * O 1 O W 2 W R 3 R Y 4 Y
	 * O O O W W W R R R Y Y Y
	 *		 B B B
	 *		 B 5 B
	 *		 B B B
	 */
	// private int orient = 2; // which side is up
	private final int SIZE = 3;
	private Face G = new Face('g');
	private Face O = new Face('o');
	private Face W = new Face('w');
	private Face R = new Face('r');
	private Face Y = new Face('y');
	private Face B = new Face('b');
	/*
	 * //#0
	 * private char[][] G = {
	 * { 'g', 'g', 'g' },
	 * { 'g', 'g', 'g' },
	 * { 'g', 'g', 'g' }
	 * };
	 * // #1
	 * private char[][] O = {
	 * { 'o', 'o', 'o' },
	 * { 'o', 'o', 'o' },
	 * { 'o', 'o', 'o' }
	 * };
	 * // #2
	 * private char[][] W = {
	 * { 'R', 'H', 'w' },
	 * { 'w', 'w', 'w'},
	 * { 'w', 'w', 'G' }
	 * };
	 * // #3
	 * private char[][] R = {
	 * { 'r', 'r', 'r' },
	 * { 'r', 'r', 'r' },
	 * { 'r', 'r', 'r' }
	 * };
	 * // #4
	 * private char[][] Y = {
	 * {'y', 'y', 'y'},
	 * {'y', 'y', 'y'},
	 * {'y', 'y', 'y'}
	 * };
	 * // #5
	 * private char[][] B = {
	 * {'b', 'b', 'b'},
	 * {'b', 'b', 'b'},
	 * {'b', 'b', 'b'}
	 * };
	 */
	private Face[] cube = { G, O, W, R, Y, B };

	public RubiksCube() {

	}

	public void print() {
		G.print("      ");
		for (int i = 0; i < 4; i++)
		{
			cube[i].print("");
		}
		B.print("      ");
	}

	private void printLayer(char[][] face, int l) {
		for (char ch : face[l])
		{
			System.out.print(ch + " ");
		}
	}

	private void printFace(char[][] face, String prefix) {
		for (int i = 0; i < SIZE; i++)
		{
			System.out.print(prefix);
			printLayer(face, i);
			System.out.println();
		}
	}

	private char[][] getFaceByNum(int n) {
		return cube[n];
	}

	public void rotateFaceClock(int f) {
		char[][] face = getFaceByNum(f);

		// use 3D cube above to access other sides for rotating them
		char temp = face[0][0];
		char temp2 = face[1][0];
		face[0][0] = face[2][0];
		face[1][0] = face[2][1];
		face[2][0] = face[2][2];
		face[2][1] = face[1][2];
		face[2][2] = face[0][2];
		face[1][2] = face[0][1];
		face[0][2] = temp;
		face[0][1] = temp2;

		char[][] faceAbove = null;
		char[][] faceBelow = null;
		char[][] faceLeft = null;
		char[][] faceRight = null;
		if (face == G)
		{
			faceAbove = Y;
			faceBelow = W;
			faceLeft = O;
			faceRight = R;
		}
		else if (face == B)
		{
			faceAbove = W;
			faceBelow = Y;
			faceLeft = O;
			faceRight = R;
		}
		else if (face == Y)
		{
			faceAbove = G;
			faceBelow = B;
			faceLeft = R;
			faceRight = O;
		}
		else if (face == W)
		{
			faceAbove = G;
			faceBelow = B;
			faceLeft = O;
			faceRight = R;
		}
		else if (face == O)
		{
			faceAbove = G;
			faceBelow = B;
			faceLeft = Y;
			faceRight = W;
		}
		else if (face == R)
		{
			faceAbove = G;
			faceBelow = B;
			faceLeft = W;
			faceRight = Y;
		}
		char[] tempRow = Arrays.copyOf(faceAbove[2], 3);
		faceAbove[2][0] = faceLeft[2][2];
		faceAbove[2][1] = faceLeft[1][2];
		faceAbove[2][2] = faceLeft[0][2];
		faceLeft[2][2] = faceBelow[0][2];
		faceLeft[1][2] = faceBelow[0][1];
		faceLeft[0][2] = faceBelow[0][0];
		faceBelow[0][2] = faceRight[0][0];
		faceBelow[0][1] = faceRight[0][1];
		faceBelow[0][0] = faceRight[0][2];
		faceRight[0][0] = tempRow[0];
		faceRight[1][0] = tempRow[1];
		faceRight[2][0] = tempRow[2];
	}

	public static void main(String[] args) {
		RubiksCube cube = new RubiksCube();
		cube.print();
		cube.rotateFaceClock(3);
		cube.print();
		cube.rotateFaceClock(3);
		cube.print();
	}
}
